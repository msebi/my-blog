---
import BaseLayout from "./BaseLayout.astro";
import Tag from "../components/Tag.astro";
import RelatedArticles from "../components/RelatedArticles.astro";
import { dateFilter } from "../lib/dateFilter.js";

const { content } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const mdURL = canonicalURL.pathname.replace(/\/$/, ".md");

const articleDate = new Date(content.date);
const isoDate = articleDate.toISOString();

const avatarSize = "32px";
const metaSpacing = "8px";
---

<BaseLayout
  title={content.metaTitle}
  description={content.metaDesc}
  image={content.ogImage ?? content.image}
  post={true}
  date={isoDate}
>
  <header class="container mx-auto my-6 text-center">
    <h1
      class="inline px-2 text-3xl font-bold text-black break-words"
      set:html={content.title}
    >
    </h1>
  </header>

  <section class="flex flex-col py-6 mb-6 -mx-4 bg-white">
    <div class="container mx-auto">
      <div class="flex flex-1">
        <div>
          <strong
            class="relative flex justify-between font-bevietnampro font-light text-gray-600"
            >{dateFilter(content.date)}
          </strong>
        </div>
      </div>

      <article
        class="mx-4 prose prose-lg md:prose-xl dark:prose-invert md:mx-auto"
      >
        <slot />
        <div class="text-right">
          <a
            href=`https://github.com/msebi/my-blog/edit/master/src/pages${mdURL}`
            target="_blank"
            rel="noreferrer noopener"
            >ðŸ›  Edit on GitHub
          </a>
        </div>
      </article>
    </div>
  </section>

  <section
    class="border-gray-200 md:bg-white md:dark:bg-dark md:-mx-4 border-top-0 md:border-t md:dark:border-slate-700 md:pt-8"
  >
    <div class="container mx-auto">
      <h2
        class="mb-2 text-sm tracking-wider text-gray-700 uppercase md:normal-case dark:text-white md:mb-0 md:text-2xl md:font-bold"
      >
        Next reads
      </h2>
    </div>
  </section>

  <section class="-mx-4 md:bg-white md:dark:bg-dark md:pt-8">
    <div class="container mx-auto">
      <RelatedArticles
        tags={content.tags}
        currentPathname={canonicalURL.pathname}
      />
    </div>
  </section>

  <section
    class="mb-4 -mx-4 bg-white border-t border-gray-200 dark:bg-dark md:border-t-0 dark:border-slate-700"
  >
    <div
      class="container flex col-span-1 px-4 py-4 mx-auto md:px-0 md:col-span-2"
    >
      <nav class="mb-2" aria-label="Tag">
        <h3 class="mb-4 text-xl font-medium leading-6 dark:text-white">
          Read more
        </h3>
        <ul class="flex">
          {content.tags.map((tag: string) => <Tag tag={tag} />)}
        </ul>
      </nav>
    </div>
  </section>

  <style define:vars={{ avatarSize, metaSpacing }}>
    .comment {
      --avatar-size: var(--avatarSize);
      --meta-spacing: var(--metaSpacing);
    }
    .comment-meta {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      row-gap: 8px;
      column-gap: 8px;
    }
    .comment-avatar {
      align-self: flex-start;
      width: var(--avatarSize);
    }
    .circle {
      aspect-ratio: 1;
      border-radius: 50%;
    }
    li {
      display: list-item;
      text-align: -webkit-match-parent;
    }
  </style>

  <script>
    const thresholds = [0.1];

    let commentsSection: HTMLElement;
    let areCommentsLoaded: Boolean = false;

    const COMMENTS_CONTAINER_ID: string = "comments-container-id";
    const COMMENTS_SECTION_ID: string = "comments-section-id";
    const LOADING_TEXT_ELEMENT_ID: string = "loading-text-id";
    const ISSUE_ID: string = "issueId";

    function createCommentListItemHTMLElement(comment: any) {
      let liElement = document.createElement("li");

      // Should be fine since the comment has already been sanitized
      liElement.innerHTML = `<article class="comment flex flex-col gap-0">
              <header class="comment-meta mb-4">
                <img
                  src="${comment.user.avatarUrl}"
                  alt="${comment.user.name}\'s avatar'"
                  aria-hidden="true"
                  class="comment-avatar circle"
                />
                <a
                  href="https://github.com/${comment.user.name}"
                  class="font-bold underline"
                  target="_blank"
                  rel="noreferrer noopener"
                >
                  ${comment.user.name}
                </a>
                <span class="fs-sm">
                  commented <time datetime="undefined">${comment.datePosted}</time>
                </span>
              </header>
              <div class="post-comment-body rhythm">
                ${comment.body}
              </div>
            </article>
          `;

      return liElement;
    }

    async function fetchComments(id: string) {
      let url;

      if (process.env.PROD) {
        url = `https://dev--splendorous-tanuki-1181dd.netlify.app/.netlify/functions/comments?id=${id}`;
      } else {
        url = `http://localhost:8888/.netlify/functions/comments?id=${id}`;
      }

      let commentsResolved = undefined;
      try {
        const comments = (await fetch(url)).json();
        commentsResolved = await comments;
        console.log(`comments: ${commentsResolved}`);
      } catch (e) {
        console.error(e);
      }
      return commentsResolved;
    }

    function handleIntersect(entries: any[], observer: any) {
      let loadingTextElement;

      entries.forEach(async (entry) => {
        if (!areCommentsLoaded) {
          console.log(`creating div for ${entry}`);
          // Add "loading..." text that will be replaced once comments are
          // fetched from github
          loadingTextElement = document.createElement("div");
          loadingTextElement.innerHTML = "Loading...";
          loadingTextElement.classList.add("text-xl", "font-bold");
          loadingTextElement.setAttribute("id", LOADING_TEXT_ELEMENT_ID);
          document
            .querySelector(`#${COMMENTS_CONTAINER_ID}`)
            ?.appendChild(loadingTextElement);

          // Fetch comments
          // The id is in the comments section attributes
          const commentsSection = document.getElementById(COMMENTS_SECTION_ID);

          console.log(`commentsSection elem: ${commentsSection}`);

          if (commentsSection) {
            const issueId = commentsSection.getAttribute(ISSUE_ID);

            console.log(`issueId: ${issueId}`);

            const comments = issueId
              ? await fetchComments(issueId)
              : { data: [] };

            console.log(`comments: ${JSON.stringify(comments)}`);
            console.log(`comments.data: ${JSON.stringify(comments.data)}`);

            const nComments = comments.data.length;

            let commentsMeta = document.getElementById("comments-count");
            if (commentsMeta) {
              commentsMeta.innerText = `${nComments} Comments`;
            }

            loadingTextElement = document.getElementById(
              LOADING_TEXT_ELEMENT_ID
            );

            if (loadingTextElement) {
              let parent = loadingTextElement.parentNode;

              // Now, create the comments list and add it to the page
              // <ol class="flex flex-col gap-10 text-lg">
              let commentsList = document.createElement("ol");
              commentsList.classList.add(
                "flex",
                "flex-col",
                "gap-10",
                "text-lg"
              );

              for (const comment of comments.data) {
                console.log(`comment: ${JSON.stringify(comment)}`);
                let commentElement = createCommentListItemHTMLElement(comment);
                commentsList.appendChild(commentElement);
              }

              parent?.insertBefore(commentsList, loadingTextElement);
              parent?.removeChild(loadingTextElement);

              areCommentsLoaded = true;
            }
          }
        }
      });
    }

    function createObserver() {
      let observer;

      let options = {
        root: null,
        rootMargin: "0px",
        threshold: thresholds,
      };

      observer = new IntersectionObserver(handleIntersect, options);
      observer.observe(commentsSection);
    }

    // Set things up
    window.addEventListener(
      "load",
      (event) => {
        commentsSection = <HTMLElement>(
          document.querySelector(`#${COMMENTS_SECTION_ID}`)
        );

        createObserver();
      },
      false
    );
  </script>

  <section
    id="comments-section-id"
    issueId={content.issueId}
    class="flex flex-col gap-10 border-gray-200 md:bg-white md:dark:bg-dark md:-mx-4 border-top-0 md:border-t md:dark:border-slate-700 md:pt-8"
  >
    <div class="flex flex-col gap-10 container mx-auto">
      <div class="mt-5 flex flex-wrap content-center gap-0">
        <div class="text-xl">
          <span id="comments-count" aria-hidden="true"></span>
        </div>
      </div>
      <div id="comments-container-id" class="flex flex-wrap content-center">
        <!-- <ol class="flex flex-col gap-10 text-lg">
          <li>
            <article class="comment flex flex-col gap-0">
              <header class="comment-meta mb-4">
                <img
                  src="https://avatars.githubusercontent.com/u/17982553?v=4"
                  alt=""
                  aria-hidden="true"
                  class="comment-avatar circle"
                />
                <a
                  href="https://github.com/AustenLamacraft"
                  class="font-bold underline"
                  target="_blank"
                  rel="noreferrer noopener"
                >
                  AustenLamacraft
                </a>
                <span class="fs-sm">
                  commented <time datetime="undefined">a year ago</time>
                </span>
              </header>
              <div class="post-comment-body rhythm">
                <p>
                  Thanks for this great tutorial! Iâ€™m just beginning to work
                  through it. One typo I just came across is that in <a
                    href="https://www.aleksandrhovhannisyan.com/blog/static-site-comments-github-issues/#testing-netlify-functions-locally"
                    target="_blank">Testing Netlify Functions Locally</a
                  > the flag should be <code>--querystring</code> not <code
                    >--queryString</code
                  > i.e. no camel case.
                </p>
              </div>
            </article>
          </li>
        </ol> -->
      </div>
    </div>
  </section>
</BaseLayout>
